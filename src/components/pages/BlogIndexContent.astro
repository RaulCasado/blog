---
import { Image } from 'astro:assets';
import FormattedDate from '../FormattedDate.astro';
import TagFilter from '../TagFilter.astro';

const { lang, posts, allTags, t } = Astro.props;

const featuredPosts = posts.filter(post => post.data.featured);
const regularPosts = posts.filter(post => !post.data.featured);

function getReadingTime(post) {
	const wordsPerMinute = 200;
	if (!post.body) return 1;
	const words = post.body.split(/\s+/).length;
	const minutes = Math.ceil(words / wordsPerMinute);
	return minutes;
}
---

<section class="blog-section">
	<div class="container">
	<div class="section-header">
			<h2>{t('blog.header')}</h2>
			<p>{t('blog.subtitle')}</p>
		</div>

		<div class="blog-controls">
			<div class="search-container">
				<input 
					type="text" 
					id="search-input" 
					placeholder={t('blog.searchPlaceholder')}
					class="search-input"
				/>
				<span class="search-icon">üîç</span>
			</div>

			<label class="weekly-toggle">
				<input 
					type="checkbox" 
					id="hide-weekly-posts"
					class="weekly-checkbox"
				/>
				<span>{t('blog.hideWeekly')}</span>
			</label>
		</div>
	<TagFilter tags={allTags} />

		<div class="no-results-message" id="no-results" style="display: none;">
			<div class="no-results-content">
				<span class="no-results-icon">üîç</span>
				<h3>{t('blog.noResults')}</h3>
				<p>{t('blog.noResultsDescription')}</p>
				<button class="clear-search-btn" id="clear-search">
					{t('blog.clearSearch')}
				</button>
			</div>
		</div>
		
		<div class="blog-grid" id="blog-grid">
			{featuredPosts.map((post, index) => {
				const readingTime = getReadingTime(post);
				const isWeekly = post.data.tags?.includes('weekly');
				return (
					<div 
						class="blog-card featured"
						data-tags={post.data.tags?.join(',') || ''}
						data-title={post.data.title.toLowerCase()}
						data-description={post.data.description?.toLowerCase() || ''}
						data-content={post.body?.toLowerCase() || ''}
						data-is-weekly={isWeekly}
					>
						<div class="blog-card-image">
							<a href={`/${lang}/blog/${post.id.replace(`${lang}/`, '')}/`}>
								<Image
									width={720}
									height={360}
									src={post.data.heroImage || "/blog-placeholder-1.jpg"}
									alt={post.data.heroImageAlt || post.data.title}
									format="webp"
									quality={80}
									loading="eager"
								/>
								<div class="featured-badge">{t('blog.featured')}</div>
							</a>
						</div>
						<div class="blog-card-content">
							<a href={`/${lang}/blog/${post.id.replace(`${lang}/`, '')}/`}>
								<h3 class="title">{post.data.title}</h3>
							</a>
							{post.data.tags?.length > 0 && (
								<div class="blog-card-tags">
									{post.data.tags.map((tag) => (
										<a href={`/${lang}/blog/tag/${tag}`} class="tag-badge">
											#{tag}
										</a>
									))}
								</div>
							)}
							<div class="blog-card-meta">
								<div class="meta-item">
									<span class="meta-icon">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
									</span>
									<FormattedDate date={post.data.pubDate} />
								</div>
								<div class="meta-item">
									<span class="meta-icon">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
									</span>
									{readingTime} {t('blog.readingTime')}
								</div>
							</div>
							<p class="blog-card-description">
								{post.data.description || t('blog.featuredDescription')}
							</p>
						</div>
						<div class="card-hover-effect"></div>
					</div>
				);
			})}

			{regularPosts.map((post, index) => {
				const readingTime = getReadingTime(post);
				const isWeekly = post.data.tags?.includes('weekly');
				return (
					<div 
						class="blog-card"
						data-tags={post.data.tags?.join(',') || ''}
						data-title={post.data.title.toLowerCase()}
						data-description={post.data.description?.toLowerCase() || ''}
						data-content={post.body?.toLowerCase() || ''}
						data-is-weekly={isWeekly}
					>
						<div class="blog-card-image">
							<a href={`/${lang}/blog/${post.id.replace(`${lang}/`, '')}/`}>
								<Image
									width={720}
									height={360}
									src={post.data.heroImage || "/blog-placeholder-1.jpg"}
									alt={post.data.heroImageAlt || post.data.title}
									format="webp"
									quality={80}
									loading="lazy"
								/>
							</a>
						</div>
						<div class="blog-card-content">
							<a href={`/${lang}/blog/${post.id.replace(`${lang}/`, '')}/`}>
								<h3 class="title">{post.data.title}</h3>
							</a>
							{post.data.tags?.length > 0 && (
								<div class="blog-card-tags">
									{post.data.tags.map((tag) => (
										<a href={`/${lang}/blog/tag/${tag}`} class="tag-badge">
											#{tag}
										</a>
									))}
								</div>
							)}
							<div class="blog-card-meta">
								<div class="meta-item">
									<span class="meta-icon">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
									</span>
									<FormattedDate date={post.data.pubDate} />
								</div>
								<div class="meta-item">
									<span class="meta-icon">
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
									</span>
									{readingTime} {t('blog.readingTime')}
								</div>
							</div>
						</div>
						<div class="card-hover-effect"></div>
					</div>
				);
			})}
		</div>
	</div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('search-input');
  const weeklyToggle = document.getElementById('hide-weekly-posts');
  const tagBtns = document.querySelectorAll('.tag-filter-btn');
  const cards = document.querySelectorAll('.blog-card');
  const noResultsMessage = document.getElementById('no-results');
  const blogGrid = document.getElementById('blog-grid');
  const clearSearchBtn = document.getElementById('clear-search');

  let activeTags = [];
  let searchTerm = '';
  let hideWeekly = false;

  function filterPosts() {
    let visibleCount = 0;
    
    cards.forEach(card => {
      const cardTags = card.dataset.tags.split(',').filter(tag => tag.trim());
      const cardTitle = card.dataset.title || '';
      const cardDescription = card.dataset.description || '';
      const cardContent = card.dataset.content || '';
      const isWeekly = card.dataset.isWeekly === 'true';

      const matchesSearch = searchTerm === '' || 
        cardTitle.includes(searchTerm) || 
        cardDescription.includes(searchTerm) ||
        cardContent.includes(searchTerm);
      
      const matchesTags = activeTags.length === 0 || 
        activeTags.some(tag => cardTags.includes(tag));
      
      const shouldHideWeekly = hideWeekly && isWeekly;
      const shouldShow = matchesSearch && matchesTags && !shouldHideWeekly;
      
      card.style.display = shouldShow ? '' : 'none';
      
      if (shouldShow) {
        visibleCount++;
      }
    });

    if (visibleCount === 0) {
      noResultsMessage.style.display = 'flex';
      blogGrid.style.display = 'none';
    } else {
      noResultsMessage.style.display = 'none';
      blogGrid.style.display = 'grid';
    }
  }

  searchInput?.addEventListener('input', (e) => {
    searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    filterPosts();
  });

  weeklyToggle?.addEventListener('change', (e) => {
    hideWeekly = (e.target as HTMLInputElement).checked;
    filterPosts();
  });

  clearSearchBtn?.addEventListener('click', () => {
    if (searchInput) {
      (searchInput as HTMLInputElement).value = '';
      searchTerm = '';
      filterPosts();
      searchInput.focus();
    }
  });

  tagBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const tag = (btn as HTMLElement).dataset.tag;

      if (tag) {
        if (activeTags.includes(tag)) {
          activeTags = activeTags.filter(t => t !== tag);
          btn.classList.remove('active');
        } else {
          activeTags.push(tag);
          btn.classList.add('active');
        }

        filterPosts();
      }
    });
  });
});
</script>

<style>
	main {
		min-height: calc(100vh - 4rem);
	}

	/* Container */
	.container {
		width: 100%;
		max-width: 1400px;
		margin: 0 auto;
		padding: 0 1rem;
	}

	/* Blog Section */
	.blog-section {
		padding: 2.5rem 0;
	}

	.section-header {
		text-align: center;
		margin-bottom: 2rem;
		padding: 0 0.5rem;
	}

	.section-header h2 {
		font-size: 1.75rem;
		font-weight: 700;
		margin: 0 0 0.75rem;
		color: hsl(var(--foreground));
	}

	.section-header p {
		font-size: 1.125rem;
		color: hsl(var(--muted-foreground));
		max-width: 900px;
		margin: 0 auto;
	}

	/* Blog Grid */
	.blog-grid {
		display: grid;
		grid-template-columns: repeat(1, 1fr);
		gap: 1.5rem;
	}

	/* Blog Card */
	.blog-card {
		background-color: hsl(var(--card));
		border-radius: var(--radius);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06);
		transition: all 0.3s ease;
		overflow: hidden;
		position: relative;
		height: 100%;
		border: 1px solid hsl(var(--border) / 0.7);
	}

	.blog-card:hover {
		box-shadow: 0 10px 20px -5px rgba(0, 0, 0, 0.15);
		transform: translateY(-5px);
	}

	.blog-card:hover .card-hover-effect {
		opacity: 1;
	}

	.blog-card a {
		text-decoration: none;
		color: hsl(var(--foreground));
		display: block;
		height: 100%;
		position: relative;
		z-index: 1;
	}

	.card-hover-effect {
		position: absolute;
		inset: 0;
		background: linear-gradient(to top, 
			hsla(var(--primary) / 0.03) 0%, 
			hsla(var(--primary) / 0) 100%);
		opacity: 0;
		transition: opacity 0.3s ease;
		z-index: 0;
		pointer-events: none;
	}

	.blog-card-image {
		position: relative;
		overflow: hidden;
	}

	.blog-card-image img {
		width: 100%;
		height: 200px;
		object-fit: cover;
		margin-bottom: 0;
		transition: transform 0.5s ease;
	}

	.blog-card:hover .blog-card-image img {
		transform: scale(1.05);
	}

	.featured-badge {
		position: absolute;
		top: 12px;
		right: 12px;
		background-color: hsl(var(--primary));
		color: hsl(var(--primary-foreground));
		padding: 0.25rem 0.75rem;
		border-radius: 9999px;
		font-size: 0.75rem;
		font-weight: 600;
		letter-spacing: 0.5px;
		text-transform: uppercase;
	}

	.blog-card-content {
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.blog-card .title {
		font-size: 1.25rem;
		font-weight: 600;
		margin: 0;
		color: hsl(var(--foreground));
		line-height: 1.4;
		transition: color 0.2s ease;
	}

	.blog-card:hover .title {
		color: hsl(var(--primary));
	}

	.blog-card-meta {
		display: flex;
		align-items: center;
		gap: 1rem;
		font-size: 0.875rem;
		color: hsl(var(--muted-foreground));
	}

	.meta-item {
		display: flex;
		align-items: center;
		gap: 0.35rem;
	}

	.meta-icon {
		display: inline-flex;
		color: hsl(var(--primary));
	}

	.blog-card-description {
		margin: 0;
		font-size: 0.925rem;
		color: hsl(var(--muted-foreground));
		line-height: 1.6;
	}

	/* Featured Blog Post */
	.blog-card.featured {
		grid-column: 1 / -1;
	}

	.blog-card.featured .blog-card-image img {
		height: 300px;
	}

	.blog-card.featured .title {
		font-size: 1.75rem;
		line-height: 1.3;
	}

	.blog-card-tags {
		margin-top: 0.5rem;
		display: flex;
		flex-wrap: wrap;
		gap: 0.4rem;
	}

	.tag-badge {
		display: inline-block;
		padding: 0.18rem 0.7rem;
		background-color: hsl(var(--muted));
		color: hsl(var(--foreground));
		border-radius: 999px;
		font-size: 0.85rem;
		text-decoration: none;
		transition: background-color 0.2s, color 0.2s;
	}

	.tag-badge:hover {
		background-color: hsl(var(--primary));
		color: hsl(var(--primary-foreground));
	}

		/* Filter controls */
	.blog-controls {
	display: flex;
	flex-direction: column;
	gap: 1rem;
	margin-bottom: 2rem;
	padding: 1.5rem;
	background-color: hsl(var(--card));
	border-radius: var(--radius);
	border: 1px solid hsl(var(--border));
	}

	.search-container {
	position: relative;
	max-width: 400px;
	}

	.search-input {
	width: 100%;
	padding: 0.75rem 2.5rem 0.75rem 1rem;
	border: 1px solid hsl(var(--border));
	border-radius: var(--radius);
	background-color: hsl(var(--background));
	color: hsl(var(--foreground));
	font-size: 0.9rem;
	}

	.search-input:focus {
	outline: none;
	border-color: hsl(var(--primary));
	box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2);
	}

	.search-icon {
	position: absolute;
	right: 0.75rem;
	top: 50%;
	transform: translateY(-50%);
	color: hsl(var(--muted-foreground));
	}

	.weekly-toggle {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	cursor: pointer;
	font-size: 0.9rem;
	}

	.weekly-checkbox {
	width: 1rem;
	height: 1rem;
	}

	/* No results message */
	.no-results-message {
		display: flex;
		justify-content: center;
		align-items: center;
		min-height: 300px;
		padding: 2rem;
		background-color: hsl(var(--card));
		border-radius: var(--radius);
		border: 1px solid hsl(var(--border));
		margin-bottom: 2rem;
	}

	.no-results-content {
		text-align: center;
		max-width: 400px;
	}

	.no-results-icon {
		font-size: 3rem;
		display: block;
		margin-bottom: 1rem;
		opacity: 0.7;
	}

	.no-results-content h3 {
		font-size: 1.25rem;
		font-weight: 600;
		margin: 0 0 0.5rem;
		color: hsl(var(--foreground));
	}

	.no-results-content p {
		color: hsl(var(--muted-foreground));
		margin: 0 0 1.5rem;
		line-height: 1.6;
	}

	.clear-search-btn {
		background-color: hsl(var(--primary));
		color: hsl(var(--primary-foreground));
		border: none;
		padding: 0.5rem 1rem;
		border-radius: var(--radius);
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: background-color 0.2s ease;
	}

	.clear-search-btn:hover {
		background-color: hsl(var(--primary) / 0.9);
	}

	.clear-search-btn:focus {
		outline: none;
		box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2);
	}

	/* Responsive Design */
	@media (min-width: 480px) {
		.container {
			padding: 0 1.5rem;
		}
		
		.section-header h2 {
			font-size: 2rem;
		}
	}
	
	@media (min-width: 640px) {
		.blog-grid {
			grid-template-columns: repeat(2, 1fr);
		}
		
		.blog-card.featured {
			grid-column: 1 / -1;
		}

		.blog-controls {
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
		}
	}

	@media (min-width: 768px) {
		.container {
			padding: 0 2rem;
		}
		
		.blog-section {
			padding: 3.5rem 0;
		}
		
		.section-header {
			margin-bottom: 2.5rem;
		}

		.blog-card.featured .blog-card-image img {
			height: 350px;
		}
	}

	@media (min-width: 1024px) {
		.blog-section {
			padding: 4rem 0;
		}
		
		.blog-grid {
			grid-template-columns: repeat(3, 1fr);
		}

		.blog-card.featured {
			display: grid;
			grid-template-columns: 1.5fr 1fr;
		}

		.blog-card.featured .blog-card-image {
			height: 100%;
		}

		.blog-card.featured .blog-card-image img {
			height: 100%;
		}

		.blog-card.featured .blog-card-content {
			padding: 2rem;
			display: flex;
			flex-direction: column;
			justify-content: center;
		}

		.blog-card.featured .title {
			font-size: 2rem;
		}
	}
</style>
