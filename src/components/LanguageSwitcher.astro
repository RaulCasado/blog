---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { languages } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

function getLanguagePath(targetLang: string) {
    const path = Astro.url.pathname;
    
    if (path === '/') {
        return targetLang === 'es' ? '/' : `/${targetLang}/`;
    }
    
    if (path.startsWith('/en/') || path.startsWith('/es/')) {
        const pathWithoutLang = path.substring(3);
        if (targetLang === 'es') {
            if (pathWithoutLang.startsWith('/blog')) {
                return `/es${pathWithoutLang}`;
            }

            return pathWithoutLang === '' ? '/' : `/es${pathWithoutLang}`;
        } else {
            return `/${targetLang}${pathWithoutLang}`;
        }
    }
    
    if (targetLang === 'es') {
        if (path.startsWith('/blog') || path.startsWith('/about') || path.startsWith('/cv') || path.startsWith('/portfolio')) {
            return `/es${path}`;
        }
        return path;
    } else {
        return `/${targetLang}${path}`;
    }
}

const flagIcons = {
    'es': 'ðŸ‡ªðŸ‡¸',
    'en': 'ðŸ‡¬ðŸ‡§'
};

const languageAbbreviations = {
    'es': 'ES',
    'en': 'EN'
};

const languageNames = {
    'es': t('lang.spanish'),
    'en': t('lang.english')
};
---

<div class="language-switcher">
    <label for="language-select" class="sr-only">{t('lang.switch')}</label>
    <select 
        id="language-select" 
        class="language-select"
        value={lang}
        title={t('lang.switch')}
    >
        {Object.entries(languages).map(([langCode, langName]) => {
            const flag = flagIcons[langCode as keyof typeof flagIcons];
            const abbr = languageAbbreviations[langCode as keyof typeof languageAbbreviations];
            const translatedName = languageNames[langCode as keyof typeof languageNames];
            return (
                <option 
                    value={langCode} 
                    selected={langCode === lang}
                    data-path={getLanguagePath(langCode)}
                >
                    {flag} {abbr}
                </option>
            );
        })}
    </select>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const languageSelect = document.getElementById('language-select') as HTMLSelectElement;
        
        if (languageSelect) {
            languageSelect.addEventListener('change', (event) => {
                const target = event.target as HTMLSelectElement;
                const selectedOption = target.selectedOptions[0];
                const targetPath = selectedOption.getAttribute('data-path');
                
                if (targetPath) {
                    window.location.href = targetPath;
                }
            });
        }
    });
</script>

<style>
    .language-switcher {
        display: flex;
        align-items: center;
        margin-right: 0.75rem;
    }
    
    .language-select {
        appearance: none;
        background-color: hsl(var(--background));
        border: 1px solid hsl(var(--border));
        border-radius: 6px;
        padding: 0.5rem 2rem 0.5rem 0.75rem;
        font-size: 0.9rem;
        color: hsl(var(--foreground));
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 110px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.5em 1.5em;
    }
    
    .language-select:hover {
        border-color: hsl(var(--accent));
        background-color: hsl(var(--accent) / 0.1);
    }
    
    .language-select:focus {
        outline: none;
        border-color: hsl(var(--primary));
        box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2);
    }
    
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }
    
    /* Dark mode support */
    @media (prefers-color-scheme: dark) {
        .language-select {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%9ca3af' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        }
    }
    
    /* Mobile styles */
    @media (max-width: 768px) {
        .language-switcher {
            margin-right: 0;
            margin-bottom: 1rem;
            justify-content: center;
        }
        
        .language-select {
            font-size: 1rem;
            padding: 0.7rem 2.5rem 0.7rem 1rem;
            min-width: 140px;
        }
    }
    
    /* High contrast mode support */
    @media (prefers-contrast: high) {
        .language-select {
            border: 2px solid currentColor;
        }
        
        .language-select:focus {
            box-shadow: 0 0 0 2px hsl(var(--background)), 0 0 0 4px currentColor;
        }
    }
    
    /* Reduce motion for accessibility */
    @media (prefers-reduced-motion: reduce) {
        .language-select {
            transition: none;
        }
    }
</style>
